"Bundle 'buftabs'
"Bundle 'thinca/vim-visualstar'
"Bundle 'fakeclip'
"Bundle 'taku-o/vim-2html-config'
"Bundle 'Lokaltog/vim-easymotion'
"Bundle 'tyru/eskk.vim'
"Bundle 'nathanaelkane/vim-indent-guides'
"Bundle 'vim-scripts/DrawIt'
"Bundle 'tpope/vim-abolish'
"Bundle 'Align'
"Bundle 'superbrothers/vim-vimperator'
"Bundle 'css_color.vim'
"Bundle 'matchit.zip'
"Bundle 'mattn/sonictemplate-vim'
"Bundle 'anekos/char-counter-vim'
"Bundle 'current-func-info.vim'
"Bundle 'mattn/gist-vim'

"ftabs.vim設定"
"ファイル名だけ表示

"-----buftabs.vim設定-----"
"ファイル名だけ表示
let buftabs_only_basename=1
"ステータスラインに表示
let buftabs_in_statusline=1 
nnoremap <silent> bn :bnext<CR>
nnoremap <silent> bp :bprev<CR>


"-----indent-guides設定-----"
"indent-guidesプラグインを有効にする
let g:indent_guides_enable_on_vim_startup = 1
"ハイライト設定を変更し、ガイドを見やすくする
let g:indent_guides_change_percent = 20 
let g:indent_guides_guide_size = 1

"-----Arign設定-----"
let g:Align_xstrlen = 3
let g:DrChiptopLvlMenu = ''


"-----eskk.vim設定-----"
let g:eskk#directory="~/.vim/bundle/eskk.vim/"
let g:eskk#directory={'path':"~/Library/Application Support/AquaSKK/skk-jisyo.utf8",'sorted':1,'encoding':'utf-8',}
let g:eskk#large_dictionary={'path':"~/.vim/bundle/eskk.vim/SKK-JISYO.L",'sorted':1,'encoding':'utf-8',}

if has('vim_starting')
  let g:eskk_dictionary='~/Dropbox/skk/user-jisyo'

  if has('mac')
    let g:eskk_large_dictionary='~/.vim/bundle/eskk.vim/SKK-JISYO.L'
  elseif has('win32') || has('win64')
    let g:eskk_large_dictionary="/SKK_JISYO.L"
  else
  endif
endif

let g:eskk_debug=0
let g:eskk_egg_like_newline=1
let g:eskk_revert_henkan_style="okuri"
let g:eskk#enable_completion=1


"----QFixGrep設定-----"
set runtimepath+=~/.vim/bundle/qfixapp/plugin/mygrep.vim


"-----EasyMotion設定-----"
"<Loader><Loader>を<Shift>に設定
let g:EasyMotion_leader_key = '<Space><Space>'


"-----vim-latex設定----"
"VIM-LaTeXを利用するファイルの拡張子を設定する
let g:tex_flavor='latex'
" *.tex を追加
au BufNewFile,BufRead *.tex,*.latex,*.sty,*.dtx,*.ltx,*.bbl setf tex
set grepprg=grep\ -nH\ $*
"" .texファイルのコンパイルプログラムを指定(エラーで停止しないようオプション指定)
let g:Tex_CompileRule_dvi = 'platex --interaction=nonstopmode $*'
"標準で.pdfにコンパイル
let g:Tex_DefaultTargetFormat = 'pdf' 
"" pdfファイル生成のための依存関係を記述。
"" 以下の設定の場合、ターゲットにpdfを指定して\llでコンパイルすると、
"" まず.dviファイルが作られ、次にそれをもとに.pdfファイルが作られる
let g:Tex_FormatDependency_pdf = 'dvi,pdf'
"" .dviファイルのコンパイルプログラムを指定
let g:Tex_CompileRule_pdf = '/usr/local/bin/dvipdfmx $*.dvi'
"" .pdfファイルのビュープログラムを指定
let g:Tex_ViewRule_pdf = 'open -a Preview' 
"---------------------------------------------

"----smartchr----"
inoremap <expr> = smartchr#loop('=',' = ',' == ')
"inoremap <expr> , smartchr#one_of(', ', ',')
inoremap <expr> + smartchr#one_of('+', ' + ')
inoremap <expr> - smartchr#one_of('-', ' - ')
"inoremap <expr> * smartchr#one_of('*', ' * ')
inoremap <expr> , smartchr#one_of(', ',',')
inoremap <expr> / smartchr#loop('/', '// ', '//')

