"ファイルを開いたときに、ファイルを閉じた時のカーソル位置までカーソルを移動
:au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


"永続的undoを有効にする
set undodir=~/.vim/undo/
set undofile
"挿入モードとノーマルモードでステータスラインの色を変更する
let g:hi_insert = 'hi StatusLine gui=None guifg=Black guibg=blue cterm=None ctermfg=white ctermbg=blue'

if has('syntax')
  augroup InsertHook
    autocmd!
    autocmd InsertEnter * call s:StatusLine('Enter')
    autocmd InsertLeave * call s:StatusLine('Leave')
  augroup END
endif

let s:slhlcmd = ''
function! s:StatusLine(mode)
  if a:mode == 'Enter'
    silent! let s:slhlcmd = 'highlight ' . s:GetHighlight('StatusLine')
    silent exec g:hi_insert
  else
    highlight clear StatusLine
    silent exec s:slhlcmd
  endif
endfunction

function! s:GetHighlight(hi)
  redir => hl
  exec 'highlight '.a:hi
  redir END
  let hl = substitute(hl, '[\r\n]', '', 'g')
  let hl = substitute(hl, 'xxx', '', '')
  return hl
endfunction




"ステータスラインを常に表示
"set laststatus=2
"set statusline=%t\ %m%r%h%w[%Y][%{&fenc}][%{&ff}]%=%c,%l%11p%%

"" ファイル別にundo履歴を残す
"au BufReadPost * call ReadUndo()
"au BufWritePost * call WriteUndo()
"func ReadUndo()
"	if filereadable(expand('%:h'). '/.undo_history/' . expand('%:t'))
"		rundo %:h/.undo_history/%:t
"	endif
"endfunc
"func WriteUndo()
"	let dirname = expand('%:h') . '/.undo_history'
"	if !isdirectory(dirname)
"		call mkdir(dirname)
"	endif
"	wundo %:h/.undo_history/%:t
"endfunc
"
"

"閉じカッコ補完
inoremap ( ()<ESC>i
inoremap <expr> ) ClosePair(')')
inoremap { {}<ESC>i
inoremap <expr> } ClosePair('}')
inoremap [ []<ESC>i
inoremap <expr> ] ClosePair(']')

" pair close checker.
" from othree vimrc ( http://github.com/othree/rc/blob/master/osx/.vimrc )
function ClosePair(char)
  if getline('.')[col('.') - 1] == a:char
    return "\<Right>"
  else
    return a:char
  endif
endf
