"
"vimプラグイン
"
set nocompatible
"" Vundle '''
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
"利用中のプラグインをBundle
Bundle 'Shougo/vimfiler'
Bundle 'gmarik/vundle'
Bundle 'Shougo/neocomplcache'
Bundle 'Shougo/neocomplcache-snippets-complete' 
Bundle 'Shougo/unite.vim'
Bundle 'quickrun.vim'
Bundle 'ujihisa/neco-look'
Bundle 'thinca/vim-ref'
Bundle 'mattn/webapi-vim'
Bundle 'Shougo/vimproc'
Bundle 'tyru/skk.vim'
Bundle 'Shougo/vimshell'
Bundle 'matchit.zip'
Bundle 'ZenCoding.vim'
Bundle 'surround.vim'
Bundle 'tpope/vim-surround'
Bundle 'tyru/caw.vim'
Bundle 'kchmck/vim-coffee-script'
Bundle 'osyo-manga/unite-quickfix'
Bundle 'osyo-manga/shabadou.vim'
Bundle 'osyo-manga/vim-watchdogs'
Bundle 'jceb/vim-hier'
Bundle 'scrooloose/syntastic'



"-----vundle設定-----"
nnoremap <silent> bi :BundleInstall<CR>

"-----vimfiller設定------"
"netrwの代わりにvimfilerを起動
let g:vimfiler_as_default_explorer = 1
"safemode無効化
let g:vimfiler_safe_mode_by_default = 0

"-----neocomplcache設定------"
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_underbar_completion = 1

"vim起動と同時に起動
"_の補完を有効化
"smart case機能を有効化
"let g:neocomplcache_enable_smart_case = 1
"区切り補完の有効化
"let g:neocomplcache_enable_underbar_completion = 1
"snippet ファイルの保存先
let g:neocomplcache_snippets_dir='~/.vim/snippets'
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

"tabで補完をできるようにする
noremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
"<C-k>でスニペットの展開
imap <C-k> <Plug>(neocomplcache_snippets_expand)

"-----unite.vim-----'
" Uniteを開く時、垂直分割で開く
let g:unite_enable_split_vertically=1

" バッファ一覧
noremap <silent>,b :<C-u>Unite buffer<CR>
" grep
nnoremap <silent>,g :<C-u><C-g> :<C-u>Unite grep<CR>
" 最近使ったファイルの一覧
noremap <silent>,z :<C-u>Unite file_mru<CR>
" ファイル一覧
noremap <silent>,f :<C-u>Unite -buffer-name=file file<CR>
" レジスタ一覧
nnoremap <silent>,,r :<C-u>Unite -buffer-name=register register<CR>
" 常用セット
nnoremap <silent>,a :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
nnoremap <silent>,all :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>


"uniteを開いている間のキーマッピング
autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
  "ESCでuniteを終了
  nmap <buffer> <ESC> <Plug>(unite_exit)
  "入力モードのときjjでノーマルモードに移動
  imap <buffer> jj <Plug>(unite_insert_leave)
  "入力モードのときctrl+wでバックスラッシュも削除
  imap <buffer> <C-w> <Plug>(unite_delete_backward_path)
  "ctrl+jで縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-j> unite#do_action('vsplit')
  "ctrl+jで横に分割して開く
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  "ctrl+oでその場所に開く
  nnoremap <silent> <buffer> <expr> <C-o> unite#do_action('open')
  inoremap <silent> <buffer> <expr> <C-o> unite#do_action('open')
endfunction"}}}

"" ファイルを開く時、ウィンドウを分割して開く
"au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
"au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')

"-----quickrun設定-----"
set splitbelow "新しいウィンドウを下に開く
"nmap ,r <Plug>(quickrun)
nmap ,r <Plug>(quickrun)
"CoffeeScriptの設定
"-----vim-coffee-script設定-----"
nnoremap <silent>,w :CoffeeCompile watch vert<CR>
"-----skk.vim設定-----"
"imap <C-j> <Plug>(skk-toggle-im)
let g:skk_jisyo=expand('~/.vim/bundle/skk.vim/SKK-JISYO.L')
let g:skk_large_jisyo=expand('~/.vim/bundle/skk.vim/SKK-JISYO.utf-8')
let g:skk_auto_save_jisyo = 1 
let g:skk_sticky_key = '<Space>' 
let skk_keep_state=0
let skk_egg_like_newline=1
let skk_show_annotation=1
let skk_use_face=1
let buftabs_only_basename = 1
let buftabs_in_statusline = 1
set statusline=%{exists('*SkkGetModeStr')?SkkGetModeStr():''}[%n]\ %t\ %y%{GetStatusEx()}\ %m%h%r%=%l/%L,%c%V\ %P\ 

function! GetStatusEx()
  let str = &fileformat
  if has("multi_byte") && &fileencoding != ""
    let str = &fileencoding . ":" . str
  endif
  let str = "[" . str . "]"
  return str
endfunction
set laststatus=2

let g:skk_use_color_cousor=1
let g:skk_cursor_hira_color='red'

"-----YankRing.vim設定-----"
"記録する履歴件数を10件に制限する
let g:yankring_max_history=10

"ウィンドウの高さ調整
let g:yankring_window_height=13
"保存先の変更
let g:yankring_history_dir=expand('$HOME')
let g:yankring_history_file='.yankring_history'
"yrでYRShowコマンドを入力
nnoremap yr :YRShow<CR>

"-----vim-ref設定-----"
nmap ,ra :<C-u>Ref alc<Space> 
nmap ,rr :<C-u>Ref refe<Space>
nmap ,ru :<C-u>Unite ref/refe<Space>
nmap ,rp :<C-u>Ref phpmanual<Space> 
" 入力モードで開始する

autocmd FileType text call ref#register_detection('_', 'alc') "textならKでalcを使う
let g:ref_refe_encoding = 'euc-jp'
let g:ref_ruby_cmd = "~/Documents/Reference/rubyrefm/refe-1_9_2" "Rubyのrefefileパス
let g:ref_phpmanual_path = '/Users/e115703/Documents/Reference/phprefm/'
let g:ref_alc_start_linenumber = 39 " 表示する行数

"-----alc設定-----"
ret g:ref_alc_cmd = 'w3m -dump %s' "w3mを使う
let g:ref_alc_start_linenumber = 3 "表示開始位置
let g:ref_alc_start_linenumber = 39 " 表示する行数
let g:ref_use_vimproc = 1   " vimprocをインストールしてない場合は0を指定

"-----VimShell設定----"
let g:vimshell_interactive_update_time = 10
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'

"----vimshell map設定----"
nnoremap <silent> vsc :VimShellCreate<CR>
nnoremap <silent> vp :VimShellPop<CR>
nnoremap <silent> vt :VimShellTab<CR>

"----Zencoding設定----"
let g:user_zen_settings = {
\       'lang' : 'ja',
\}
""---shabadou.vim設定---"
let g:quickrun_config = {
\   "_" : {
\       "hook/close_unite_quickfix/enable_hook_loaded" : 1,
\       "hook/unite_quickfix/enable_failure" : 1,
\       "hook/close_quickfix/enable_exit" : 0,
\       "hook/close_buffer/enable_failure" : 1,
\       "hook/close_buffer/enable_empty_data" : 1,
\       "outputter" : "multi:buffer:quickfix",
\       "runner" : "vimproc",
\       "outputter/buffer/split" : ":vertical 45",
\       "runner/vimproc/updatetime" : 40,
\   }
\}

""---watchdog設定---"
" watchdogs.vim の設定を追加
"call watchdogs#setup(g:quickrun_config)
"let g:watchdogs_check_CursorHold_enable = 1
"let g:watchdogs_check_BufWritePost_enable = 1

"---syntastic.vim設定---"
let g:syntastic_enable_highlighting=0
let g:syntastic_auto_jump=1
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list = 1 
let g:syntastic_mode_map = {
      \  'mode': 'active',
      \ 'active_filetypes': ['ruby', 'javascript'],
      \ 'passive_filetypes': []
      \ }

