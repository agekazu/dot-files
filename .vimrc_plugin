"
"vimプラグイン
"
set nocompatible
filetype off
"" NeoBundle'''
if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim
endif
call neobundle#rc(expand('~/.vim/bundle/'))
NeoBundle 'Align'                     "txt整形
NeoBundle "osyo-manga/unite-quickfix" " uniteでquickfix
NeoBundle "osyo-manga/shabadou.vim"   " quickrun-hook
NeoBundle 'mattn/emmet-vim'           " vimでemmet
NeoBundle 'Shougo/neobundle.vim'      " vim-plugin管理
NeoBundle 'Lokaltog/vim-powerline'    " status line 
NeoBundle 'davidhalter/jedi-vim'      " python 補完
NeoBundle 'thinca/vim-quickrun'       " プログラムの実行
NeoBundle 'Shougo/unite-build'        " Unite build :: make
NeoBundle 'ujihisa/neco-look'         " English compensation
NeoBundle 'h1mesuke/unite-outline'    " 外観の表示 
NeoBundle 'Shougo/unite.vim'          " vim 統合インタフェース
NeoBundle 'tpope/vim-fugitive'        " Gwrite-Gcommit
NeoBundle 'YankRing.vim'              " Yankを保存しておく
NeoBundle 'nathanaelkane/vim-indent-guides' " indentを解りやすくハイライト表示


NeoBundleLazy 'Shougo/neocomplcache', {
            \ 'autoload' : {
            \   'insert' : 1,
            \ }}

NeoBundleLazy 'Shougo/neosnippet', {
            \ 'autoload' : {
            \   'insert' : 1,
            \ }}

NeoBundleLazy 'Shougo/neosnippet-snippets', {
            \ 'autoload' : {
            \   'insert' : 1,
            \ }}

NeoBundle 'Shougo/vimproc', {
            \ 'build' : {
            \     'windows' : 'make -f make_mingw32.mak',
            \     'cygwin' : 'make -f make_cygwin.mak',
            \     'mac' : 'make -f make_mac.mak',
            \     'unix' : 'make -f make_unix.mak',
            \    },
            \ }

NeoBundleLazy 'Shougo/vimfiler', {
            \   'autoload' : { 'commands' : [ "VimFilerTab", "VimFiler", "VimFilerExplorer" ] }
            \}

NeoBundleLazy 'Shougo/vimshell', {
            \   'autoload' : { 'commands' : [ "VimShell", "VimShellTab", "VimShellPop", "VimShellInteractive" ] }
            \}

NeoBundleLazy 'thinca/vim-ref', {
            \   'autoload' : { 'commands' : ['Ref'] }
            \}

NeoBundleLazy 'gregsexton/gitv',{
            \   'autoload' : { 'commands' : ['Gitv'] } 
            \}


filetype plugin indent on
filetype indent on

"-----neobundle-----"
nnoremap <silent><Leader>bi :NeoBundleInstall<CR>
nnoremap <silent><Leader>bc :NeoBundleClean<CR>
nnoremap <silent><Leader>bu :NeoBundleUpdate<CR>

"-----vimfiller------"
"netrwの代わりにvimfilerを起動
let g:vimfiler_as_default_explorer = 1
"safemode無効化
let g:vimfiler_safe_mode_by_default = 0

"-----neocomplcache------"
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_underbar_completion = 1

"-----neosnippet------"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>" 

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)"
            \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)"
            \: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
    set conceallevel=2 concealcursor=i
endif

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/snippets/'

autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd! FileType markdown hi! def link markdownItalic Normal
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
endif
"let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete


"-----unite.vim-----'
" Uniteを開く時、垂直分割で開く
let g:unite_enable_split_vertically=1


" バッファ一覧
noremap <Leader>b :<C-u>Unite buffer<CR>
" grep
nnoremap <Leader>g :<C-u><C-g> :<C-u>Unite grep<CR>
" 最近使ったファイルの一覧
noremap <Leader>s :<C-u>Unite file_mru<CR>
" ファイル一覧
noremap <Leader>f :<C-u>Unite -buffer-name=file file<CR>
" レジスタ一覧
nnoremap <Leader><Leader>r :<C-u>Unite -buffer-name=register register<CR>
" 常用セット
nnoremap <Leader>a :<C-u>Unite buffer file_mru<CR>
" アウトライン
nnoremap  <Leader>ol : <C-u>Unite -no-quit -vertical -winwidth=30 outline<CR>
" 全部乗せ
nnoremap <Leader>all :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
command! Uf Unite file
command! Ur Unite register
command! Um Unite file_mru
command! Ug Unite grep
command! Uo Unite outline
command! Uc Unite menu:commands

"-----quickrun-----"
"set splitbelow "新しいウィンドウを左に開く
nmap <Leader>r <Plug>(quickrun)
let g:quickrun_config = {'*': {'hook/time/enable': '1'},}

"-----vim-coffee-script-----"
nnoremap <Leader>w :CoffeeCompile watch vert<CR>


"-----yank-ring-----"
"ウィンドウの高さ調整
let g:yankring_window_height=13
"保存先の変更
let g:yankring_history_dir=expand('$HOME')
let g:yankring_history_file='.yankring_history'
"yrでYRShowコマンドを入力
nnoremap <Leader>yr :YRShow<CR>

"-----vim-ref-----"
nmap <Leader>ra :Ref alc 
nmap <Leader>rr :Ref refe
nmap <Leader>ru :Unite ref/refe
nmap <Leader>rp :Ref phpmanual 

"-----ref-----"
" 入力モードで開始する
let g:ref_rby_cmd = "~/Documents/Reference/rubyrefm/refe-1_9_2" "Rubyのrefefileパス
let g:ref_phpmanual_path = '/Users/e115703/Documents/Reference/phprefm/'
let g:ref_alc_start_linenumber = 39 " 表示する行数

"-----VimShell----"
let g:vimshell_interactive_update_time = 10
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'

autocmd FileType vimshell setlocal nonumber

nnoremap <silent><Leader>vp :VimShellPop<CR>
nnoremap <silent><Leader>vsc :VimShellCreate<CR>
nnoremap <silent><Leader>vt :VimShellTab<CR>

"-----Align----"
let g:Align_xstrlen=3

"-----shabadou.vim----"
let g:quickrun_config = {
\   "_" : {
\       "hook/close_unite_quickfix/enable_hook_loaded" : 1,
\       "hook/close_quickfix/enable_exit" : 1,
\       "outputter" : "multi:buffer:quickfix",
\       "hook/shabadoubi_touch_henshin/enable" : 1,
\       "hook/shabadoubi_touch_henshin/wait" : 20,
\       "outputter/buffer/split" : ":vertical belowright 30sp",
\       "runner" : "vimproc", 
\       "runner/vimproc/updatetime" : 40,
\   }
\}

"-----vim-indent-guides----"
let g:indent_guides_auto_colors=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=233
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=234
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1
